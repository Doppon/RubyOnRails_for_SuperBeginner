# 第一章

## config.ruの意味
Rack(Webサーバーの基本的な仕組みを提供するためのモノ)を実行するときに提供している




# 第二章

## ルーティングのget
  get 'helo/index' は自動的に 'コントローラー名/アクション名' で補完してくれる。

  ↓自分でアドレスを指定したい場合

  get 'helo', to: 'コントローラ名#アクション名'


## renderでのHTMLソースの表示

-------------------------------------------
render html: msg
「msgにはhtmlの情報が入ってる」

↓

クロススクリプト系の対策として自動エスケープされる。

↓表示させたいとき

render html: msg.html_safe
これで行くd(´・ω・｀)
-------------------------------------------


## ERB

Embedded Rubyの略 ← 略称は知らなかった
そのまま埋め込みRuby


## pt単位

ptは1/72インチのサイズ。
0.352778mmぐらいだそう。
参考にした記事↓
https://adworks24.co.jp/archives/740.html


## CSRFの解除方法
※CSRF(Cross Site Request Forgery)の略

普通にコントローラー内に "protect_from_forgery" と書くだけでおｋ




# 第三章

## データベースのpoolの意味
これは実はデータベースにアクセスするためのもので、「５」とすると
最大で５ユーザーが同時にデータベースにアクセスできる。


## personモデル
personモデルを追加するとデータのymlファイルは複数形が入るので
「people.yml」となって作成される
ちょっと面白い笑




# 第四章

## レイアウトの設定
今回の言う「レイアウトの設定」とは
コントローラー内で使う「layout 'layout-sample'」のモノである。

実際にはこのレイアウト設定には３つ程のステップがある。

1. コントローラー内に宣言文を書く
2. 「layouts/」内に適切なレレイアウトファイルを用意する
3. 「config/assets.rb」にアセットパイプラインの設定を追加する


## バリデーションの主なルール

### presence
------------------
- presence: ture
------------------
こうする事で「必要項目」としての振る舞いが付与される。

### uniqueness
------------------
- uniqueness: true
------------------
こうする事で「同じ値が存在していないか」確認してくれるようになる。

### length
機能としてはテキストの長さをチェックしてくれるモノ。
---------------------------------
- length{ 設定: 値, 設定: 値, ...}
---------------------------------
以上のような書式で用いいる。
実際には以下のようなモノが設定できる。

- maximum
  - 最大文字数の指定

- minimum
  - 最小文字数の指定

- is
  - 指定の文字数かどうか

- within
  - 指定文字数の範囲かどうか
  
- tokenizer
  - テキストを分割するためのモノ
    - ラムダ式の書式でまとめられたモノを値として用意する。




# 第五章

## resourcesの書き換え
「resources :users」をベタ書きすると

get '/users', to: 'users#index'
get '/users/:id', to: 'users#show'

get '/users/new', to: 'users#new'
post '/users', to: 'users#create'

get '/users/:id/edit', to: 'users#edit'
patch '/users/:id', to: 'users#edit'
put '/users/:id', to: 'users#update'

delete '/users/:id', to: 'users#destroy'

こうなる↑
